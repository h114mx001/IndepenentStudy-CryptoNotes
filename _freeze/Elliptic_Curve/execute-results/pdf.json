{
  "hash": "4800b7d7773d474f628686e896f290cb",
  "result": {
    "markdown": "# Introduction to Elliptic Curve {#sec-Asymmetric}\n\nElliptic Curve Cryptography is used widely in many new authentication and advance tech like BitCoin, blockchain, etc. It is also a solution for the Post-quantum. This cryptography method is using a special curve, called Elliptic Curve. \n\n\n## Elliptic Curve\n\nAn elliptic curve is the set of solutions to an equation of the form:\n\n$$\nY^2 = X^3 + AX + B\n$$\n\nfor A, B as the parameters. The constraints over $A, B$ is:\n\n$$\n\\Delta_E = 4A^3 + 27B^2 \\neq 0\n$$\n\nFor example, here is the elliptic curve $Y^2 = X^3 - 3X + 3$\n\n```Python\nE = EllipticCurve([-3, 3]) # create curve y^2 = x^3 - 3x + 3\nE.plot()\n```\n```{sagemath}*\nE = EllipticCurve([-3, 3])\nE.plot()\n```\n\nThe basic operation on Elliptic Curve is **addition**. \n\n### Addition rules \n\n**If two points are different (i. e. $P$ + $Q$)**:\n\n+ Connect $P, Q$ as a line $L$, with intersection $R$. \n+ Take reflection of $R$ over x-axis $\\rightarrow R'$.\n\n![](/images/add_1.png)\n\n+ This operation is easy, as \n$$\nY = \\lambda \\cdot (X-x_1) + y_1\n$$\nwhere the slope $\\lambda = \\frac{y_2-y_1}{x_2-x_1}$\n+ Substitute $Y$ as an expression of $X$, we can find all values $X, Y$\n\n**Addition of the same points ($P + P$)**\n\n+ Find the tangent $L$ at $P$ on the curve $E$.\n+ Find its intersection on $E$, and also take the reflection. \n\n![](/images/add_2.png)\n\nAs $Y^2 = X^3 + AX + B$, we can find the slope $\\frac{dY}{dX}$ by taking its implicit derivative.\n$$\n\\begin{equation}\n2Y\\cdot \\frac{dY}{dX} = 3X^2 - 15 \\qquad \\frac{dY}{dX} = \\frac{3X^2 - 15}{2Y}\n\\end{equation}\n$$\nWith same method as the previous case, we can find the value of $R'$\n\n**If the connection $PQ$ is parallel with Oy**\n\nIn the case when the connection line gives no intersection with the curve, then we define its value as null $\\mathcal{O}$. \n\n![](/images/zero.png)\n\nWith the support of this null, we can define the addition under the curve, as in modulo arithmetic: \n\n![](/images/theorem.png)\n\n### Multiplication\n\n+ The multiplication of point $P$ on curve $E$ is adding point $P$ $n$ times.\n\n$$\nnP = \\underbrace{P + P + \\ldots + P}_{\\text{n times}}\n$$\n\n+ In order to generalize the addition, we have an algorithm by the way:\n\n![](/images/addition_algo.png){fig-align=\"center\"}\n\nWith support of SageMath, we can perform the addition and multiplication very easily. \n\n```Python\nE = EllipticCurve([-3, 3])\n# just 2 random points\nP = E(1, 1)\nQ = E(0)\nprint(P)\nprint(Q)\nprint(P + Q)\nprint(P - Q)\nprint(P * 2)\n```\n\n\n```{sagemath}\nE = EllipticCurve([-3, 3])\n# just 2 random points\nP = E(1, 1)\nQ = E(0)\nprint(P)\nprint(Q)\nprint(P + Q)\nprint(P - Q)\nprint(P * 2)\n```\n\n\n\nIn here, we introduced the substitution, which is just simple as $P - Q = P + (-Q)$, where $-Q$ can be interpreted as the reflection over $Ox$ of the point.\n\nWith multiplication, there is also a version like `square-and-multiply` in modular arithmetic, which is `double-and-add`.\n\n![](/images/double-add.png)\n\n",
    "supporting": [
      "Elliptic_Curve_files/figure-pdf"
    ],
    "filters": []
  }
}