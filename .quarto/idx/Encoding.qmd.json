{"title":"Encoding","markdown":{"headingText":"Encoding","headingAttr":{"id":"sec-Foundations","classes":[],"keyvalue":[]},"containsRefs":false,"markdown":"\n## Introductions \n\nAs a two-year (or more) CTF players, I have not see any challenges that works too much on the encoding (As they are standardized). Some may appear in challenges of Web or Pwn, where the format of the data matters. In this section, I will introduce several common types of encoding for you!\n\n## ASCII\n\nASCII is 7-bit encoding standard, where each letter is assigned with a number from 0-127. Besides this ASCII table, we also have an extended ASCII, where 256 characters are encoded. You can have a look at [ASCII Table](https://www.asciitable.com/) to see it clearer. \n\n```Python\ns = \"Hello World\"\nprint([ord(c) for c in s])\n```\n```{sagemath}\ns = \"Hello World\"\nprint([ord(c) for c in s])\n```\n\n## Hex \n\nHex stands for Hexadecimal, i.e. base 16. Basically, you can understand Hex as a version of ASCII but in hexadecimal rather than decimal. \n\n```Python\ns = \"Hello World\"\nprint([hex(ord(c)) for c in s])\nprint(bytes(s, encoding='utf-8').hex())\n```\n```{sagemath}\ns = \"Hello World\"\nprint([hex(ord(c)) for c in s])\nprint(bytes(s, encoding='utf-8').hex())\n```\n\n## Base64\n\nUsing Base64 encoding, you can represent binary data as ASCII string, with an alphabet of 64 characters. Some other versions of Base64, like Base58 (Using in Bitcoin, remove some 'look-the-same' character like l (normalcase l) and I (uppercase i)) are alse used widely. \n\nIn Python, you can use the library `base64` for working with this encoding.\n\n```Python\ns = \"Hello World\"\nimport base64\nb64enc = base64.b64encode(s)\nprint(b64enc)\nprint(base64.b64decode(b64enc))\n```\n```{sagemath}\ns = b\"Hello World\"\nimport base64\nb64enc = base64.b64encode(s)\nprint(b64enc)\nprint(base64.b64decode(b64enc))\n```\n\n## Bignum and Bytes\n\nIf you want to encrypt a word (\"HELLO\", for example); most of the case, you can't apply encryption directly on it. A solution is that: concatenate the hex value of each characters. For example:\n\n```\nmessage: HELLO\nascii bytes: [72, 69, 76, 76, 79]\nhex bytes: [0x48, 0x45, 0x4c, 0x4c, 0x4f]\nbase-16: 0x48454c4c4f\nbase-10: 310400273487 \n```\n\nWhen working with these bignums, a Python library [PyCryptodome](https://pypi.org/project/pycryptodome/) provides two functions to convert back and forth: \n\n\n```Python\ns = b\"Hello World\"\nprint(s.hex())\nfrom Crypto.Util.number import long_to_bytes, bytes_to_long\n# The usage of command\nprint(bytes_to_long(s))\n\n# Compare with the hex value\nprint(hex(bytes_to_long(s)))\n\n# Decoding\nprint(long_to_bytes(bytes_to_long(s)))\n```\n```{sagemath}\ns = b\"Hello World\"\nprint(s.hex())\nfrom Crypto.Util.number import long_to_bytes, bytes_to_long\nprint(bytes_to_long(s))\nprint(hex(bytes_to_long(s)))\nprint(long_to_bytes(bytes_to_long(s)))\n```\n\nAlso, there are some forms of encoding like **URL Encoding**, which uses a lot in our hyperlinks. You can always search them, when you need it xD."},"formats":{"html":{"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":false,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"jupyter"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","output-file":"Encoding.html"},"language":{},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.2.280","bibliography":["references.bib"],"jupyter":{"kernelspec":{"name":"sagemath","language":"sagemath","display_name":"SageMath 9.6"}},"theme":"cosmo"},"extensions":{"book":{"multiFile":true}}}}}